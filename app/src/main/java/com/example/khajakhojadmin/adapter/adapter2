import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.graphics.drawable.Drawable
import android.view.LayoutInflater
import android.view.MotionEvent
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.RecyclerView
import com.example.khajakhojadmin.R
import com.example.khajakhojadmin.model.Restaurant

class RestaurantAdapter(private var restaurantList: List<Restaurant>, private val onDeleteListener: OnDeleteListener) :
    RecyclerView.Adapter<RestaurantAdapter.RestaurantViewHolder>() {

    // Swipe-to-delete setup
    private var swipeBackground: ColorDrawable = ColorDrawable(Color.RED)
    private lateinit var deleteIcon: Drawable

    init {
        deleteIcon = ContextCompat.getDrawable(onDeleteListener.getContext(), R.drawable.ic_delete)!!
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RestaurantViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.restaurant_sample_item, parent, false)
        return RestaurantViewHolder(view)
    }

    override fun onBindViewHolder(holder: RestaurantViewHolder, position: Int) {
        val restaurant = restaurantList[position]
        holder.bind(restaurant)
    }

    override fun getItemCount(): Int {
        return restaurantList.size
    }

    fun updateRestaurantList(newList: List<Restaurant>) {
        restaurantList = newList
        notifyDataSetChanged()
    }

    inner class RestaurantViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        private val restaurantName: TextView = itemView.findViewById(R.id.RestaurantName)
        private val restaurantCuisine: TextView = itemView.findViewById(R.id.ResturantCuisine)
        private val restaurantDistance: TextView = itemView.findViewById(R.id.ResturantDistance)
        private val restaurantTime: TextView = itemView.findViewById(R.id.ResturantTime)
        private val restaurantLocation: TextView = itemView.findViewById(R.id.restaurantAddress)
        private val restaurantRating: TextView = itemView.findViewById(R.id.restaurantRating)

        @SuppressLint("ClickableViewAccessibility", "SetTextI18n")
        fun bind(restaurant: Restaurant) {
            restaurantName.text = restaurant.name
            restaurantCuisine.text = restaurant.cuisineType
            restaurantDistance.text = "0.5 km"
            restaurantTime.text = "${restaurant.openTime} - ${restaurant.closeTime}"
            restaurantLocation.text = restaurant.address
            restaurantRating.text = restaurant.rating.toString()

            itemView.setOnTouchListener { _, event ->
                if (event.action == MotionEvent.ACTION_DOWN) {
                    onDeleteListener.onSwipe(getAdapterPosition())
                }
                false
            }
        }
    }

    // Interface to handle delete action
    interface OnDeleteListener {
        fun onSwipe(position: Int)
        fun getContext(): Context
    }

    // Swipe-to-delete functionality
    fun enableSwipeToDelete(recyclerView: RecyclerView) {
        val swipeCallback = object : ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT) {
            override fun onMove(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder, target: RecyclerView.ViewHolder): Boolean {
                return false
            }

            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
                onDeleteListener.onSwipe(viewHolder.adapterPosition)
            }

            override fun onChildDraw(
                c: Canvas,
                recyclerView: RecyclerView,
                viewHolder: RecyclerView.ViewHolder,
                dX: Float,
                dY: Float,
                actionState: Int,
                isCurrentlyActive: Boolean
            ) {
                super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive)
                val itemView = viewHolder.itemView
                val iconMargin = (itemView.height - deleteIcon.intrinsicHeight) / 2
                val iconTop = itemView.top + (itemView.height - deleteIcon.intrinsicHeight) / 2
                val iconBottom = iconTop + deleteIcon.intrinsicHeight

                if (dX > 0) { // Swiping to the right (right swipe)
                    val iconLeft = itemView.left + iconMargin
                    val iconRight = itemView.left + iconMargin + deleteIcon.intrinsicWidth
                    deleteIcon.setBounds(iconLeft, iconTop, iconRight, iconBottom)
                    swipeBackground.setBounds(itemView.left, itemView.top, itemView.left + dX.toInt(), itemView.bottom)
                } else if (dX < 0) { // Swiping to the left (left swipe)
                    val iconLeft = itemView.right - iconMargin - deleteIcon.intrinsicWidth
                    val iconRight = itemView.right - iconMargin
                    deleteIcon.setBounds(iconLeft, iconTop, iconRight, iconBottom)
                    swipeBackground.setBounds(itemView.right + dX.toInt(), itemView.top, itemView.right, itemView.bottom)
                }
                swipeBackground.draw(c)
                deleteIcon.draw(c)
            }
        }

        val itemTouchHelper = ItemTouchHelper(swipeCallback)
        itemTouchHelper.attachToRecyclerView(recyclerView)
    }
}
